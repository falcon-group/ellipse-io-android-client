plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id "com.google.protobuf" version "0.8.12"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.io.ellipse"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions "default"
    productFlavors {
        prod {
            dimension "default"
            buildConfigField("String", "API_URL", localProperties['api.url'])
            buildConfigField("String", "MESSAGE_DIGEST", localProperties['cipher.message_digest'])
            buildConfigField("String", "KEY_SPEC_ALGORITM", localProperties['cipher.key_spec_algorihtm'])
            buildConfigField("String", "CIPHER_KEY", localProperties['cipher.secret_key'])
            buildConfigField("String", "CIPHER_ALGORITHM", localProperties['cipher.algorithm'])
            versionNameSuffix ""
        }
        dev {
            dimension "default"
            buildConfigField("String", "API_URL", localProperties['api.url'])
            buildConfigField("String", "MESSAGE_DIGEST", localProperties['cipher.message_digest'])
            buildConfigField("String", "KEY_SPEC_ALGORITM", localProperties['cipher.key_spec_algorihtm'])
            buildConfigField("String", "CIPHER_KEY", localProperties['cipher.secret_key'])
            buildConfigField("String", "CIPHER_ALGORITHM", localProperties['cipher.algorithm'])
            versionNameSuffix "_dev"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.FlowPreview"
        ]
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.10.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    /* UI/UX Design */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$app_compat_version"
    implementation "androidx.core:core-ktx:$core_ktx_verion"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "com.afollestad.material-dialogs:core:$material_dialog_version"

    /*Live data*/
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_ktx_version"

    /*Logs*/
    implementation "com.jakewharton.timber:timber:$timber_version"

    /*Tests*/
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test:runner:$test_runner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    /*Dagger*/
    implementation "com.google.dagger:hilt-android:$dagger_hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$dagger_viemodel_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_hilt_version"
    kapt "androidx.hilt:hilt-compiler:$dagger_viemodel_version"

    /*Navigation*/
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    /*Coroutines*/
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    /*Permission*/
    implementation "ru.superjob:kotlin-permissions:$kotlin_permission"

    /*Network*/
    implementation "com.google.code.gson:gson:$gson_version"

    /* DataStore */
    implementation "androidx.datastore:datastore-preferences:$datastore_version"
    implementation "androidx.datastore:datastore-core:$datastore_version"
    implementation  "com.google.protobuf:protobuf-javalite:$protobuf_version"

    /* Retrofit */
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_interceptor_version"

    implementation "androidx.multidex:multidex:$multidex_version"
}